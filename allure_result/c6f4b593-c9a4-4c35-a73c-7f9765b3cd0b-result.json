{"name": "VWO Login Negative Testcase", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=131.0.6778.265); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF64EA180D5+2992373]\n\t(No symbol) [0x00007FF64E6ABFD0]\n\t(No symbol) [0x00007FF64E54590A]\n\t(No symbol) [0x00007FF64E559F04]\n\t(No symbol) [0x00007FF64E5589B4]\n\t(No symbol) [0x00007FF64E54D0E9]\n\t(No symbol) [0x00007FF64E54AF32]\n\t(No symbol) [0x00007FF64E54F11C]\n\t(No symbol) [0x00007FF64E54F1EF]\n\t(No symbol) [0x00007FF64E5931CB]\n\t(No symbol) [0x00007FF64E5BF36A]\n\t(No symbol) [0x00007FF64E58C596]\n\t(No symbol) [0x00007FF64E5BF580]\n\t(No symbol) [0x00007FF64E5DF584]\n\t(No symbol) [0x00007FF64E5BF113]\n\t(No symbol) [0x00007FF64E58A918]\n\t(No symbol) [0x00007FF64E58BA81]\n\tGetHandleVerifier [0x00007FF64EA76A2D+3379789]\n\tGetHandleVerifier [0x00007FF64EA8C32D+3468109]\n\tGetHandleVerifier [0x00007FF64EA80043+3418211]\n\tGetHandleVerifier [0x00007FF64E80C78B+847787]\n\t(No symbol) [0x00007FF64E6B757F]\n\t(No symbol) [0x00007FF64E6B2FC4]\n\t(No symbol) [0x00007FF64E6B315D]\n\t(No symbol) [0x00007FF64E6A2979]\n\tBaseThreadInitThunk [0x00007FFD0A0E7374+20]\n\tRtlUserThreadStart [0x00007FFD0A4FCC91+33]", "trace": "@allure.title(\"VWO Login Negative Testcase\")\n    @allure.description(\"TC1 - Negative TC - VWO Login with invalid creds.\")\n    @pytest.mark.negativevwologin\n    def test_app_vwo_login_chrome():\n        load_dotenv()\n        chrome_options = Options()\n        chrome_options.add_argument(\"--incognito\")\n        driver = webdriver.Chrome(chrome_options)\n        driver.get(os.getenv(\"URL\"))\n    \n        all_links_page = driver.find_elements(By.TAG_NAME, \"a\")\n        print(len(all_links_page))\n        for i in all_links_page:\n>           print(i.text)\n\nJan\\ex03_selenium_locators\\test13_selenium_locators_MiniProject_tagname.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000013F3E928050>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF64E6A2979]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD0A0E7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD0A4FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=131.0.6778.265); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF64EA180D5+2992373]\nE       \t(No symbol) [0x00007FF64E6ABFD0]\nE       \t(No symbol) [0x00007FF64E54590A]\nE       \t(No symbol) [0x00007FF64E559F04]\nE       \t(No symbol) [0x00007FF64E5589B4]\nE       \t(No symbol) [0x00007FF64E54D0E9]\nE       \t(No symbol) [0x00007FF64E54AF32]\nE       \t(No symbol) [0x00007FF64E54F11C]\nE       \t(No symbol) [0x00007FF64E54F1EF]\nE       \t(No symbol) [0x00007FF64E5931CB]\nE       \t(No symbol) [0x00007FF64E5BF36A]\nE       \t(No symbol) [0x00007FF64E58C596]\nE       \t(No symbol) [0x00007FF64E5BF580]\nE       \t(No symbol) [0x00007FF64E5DF584]\nE       \t(No symbol) [0x00007FF64E5BF113]\nE       \t(No symbol) [0x00007FF64E58A918]\nE       \t(No symbol) [0x00007FF64E58BA81]\nE       \tGetHandleVerifier [0x00007FF64EA76A2D+3379789]\nE       \tGetHandleVerifier [0x00007FF64EA8C32D+3468109]\nE       \tGetHandleVerifier [0x00007FF64EA80043+3418211]\nE       \tGetHandleVerifier [0x00007FF64E80C78B+847787]\nE       \t(No symbol) [0x00007FF64E6B757F]\nE       \t(No symbol) [0x00007FF64E6B2FC4]\nE       \t(No symbol) [0x00007FF64E6B315D]\nE       \t(No symbol) [0x00007FF64E6A2979]\nE       \tBaseThreadInitThunk [0x00007FFD0A0E7374+20]\nE       \tRtlUserThreadStart [0x00007FFD0A4FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "description": "TC1 - Negative TC - VWO Login with invalid creds.", "start": 1737051125236, "stop": 1737051143668, "uuid": "c98e442d-e592-4b35-be1d-5b13e91b4b40", "historyId": "a6629e1a6a0d00c775a84765ab27eee2", "testCaseId": "a6629e1a6a0d00c775a84765ab27eee2", "fullName": "Jan.ex03_selenium_locators.test13_selenium_locators_MiniProject_tagname#test_app_vwo_login_chrome", "labels": [{"name": "tag", "value": "negativevwologin"}, {"name": "parentSuite", "value": "Jan.ex03_selenium_locators"}, {"name": "suite", "value": "test13_selenium_locators_MiniProject_tagname"}, {"name": "host", "value": "DESKTOP-GA3MM47"}, {"name": "thread", "value": "13452-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Jan.ex03_selenium_locators.test13_selenium_locators_MiniProject_tagname"}]}